{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.8.8 64-bit ('base': conda)",
   "metadata": {
    "interpreter": {
     "hash": "dca0ade3e726a953b501b15e8e990130d2b7799f14cfd9f4271676035ebe5511"
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib\n",
    "\n",
    "from scipy import stats\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "NUMBER_TORNADOS = 111 #Number of Tornado Events\n",
    "NUMBER_RANDOM = 110 #Number of Random Events\n",
    "NUMBER_DAYS = 14 #Number of days of data per Tornado/Event (Max: 57)\n",
    "FILE_NAME = \"historical_data_2.csv\" #CSV file that contains the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "#Field 0: 'datatime'\n",
    "#Field 1: 'temperature'\n",
    "#Field 2: 'windspeed'\n",
    "#Field 3: 'surface solar radiation' -Alvaro\n",
    "#Field 4: 'relative humidity' -Abdullah\n",
    "#Field 5: 'surface pressure' -Frazier\n",
    "#Field 6: 'total precipitation' -Simon\n",
    "#Field 7: 'city'\n",
    "#Field 8: 'event_id'\n",
    "#Field 9: 'latitude'\n",
    "#Field 10: 'longitude'\n",
    "#Field 11: 'outcome'\n",
    "\n",
    "df = pd.read_csv(FILE_NAME)\n",
    "print(type(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "         datetime  temperature (degC)  wind_speed (m/s)  \\\n",
       "0      2009-11-25                9.91              2.76   \n",
       "1      2009-11-26                9.35              2.11   \n",
       "2      2009-11-27               13.11              3.30   \n",
       "3      2009-11-28               16.85              3.27   \n",
       "4      2009-11-29               12.53              3.04   \n",
       "...           ...                 ...               ...   \n",
       "16867  2017-02-24                4.32              5.83   \n",
       "16868  2017-02-25                2.52              1.58   \n",
       "16869  2017-02-26                9.50              2.33   \n",
       "16870  2017-02-27               15.56              4.96   \n",
       "16871  2017-02-28               20.36              6.07   \n",
       "\n",
       "       surface_solar_radiation (W/m^2)  relative_humidity (0-1)  \\\n",
       "0                                  160                     0.47   \n",
       "1                                  145                     0.60   \n",
       "2                                  111                     0.63   \n",
       "3                                   71                     0.83   \n",
       "4                                   98                     0.79   \n",
       "...                                ...                      ...   \n",
       "16867                              187                     0.49   \n",
       "16868                              155                     0.46   \n",
       "16869                              183                     0.61   \n",
       "16870                               54                     0.77   \n",
       "16871                               18                     0.82   \n",
       "\n",
       "       surface_pressure (Pa)  total_precipitation (mm of water equivalent)  \\\n",
       "0                  101257.58                                          0.00   \n",
       "1                  101181.89                                          0.00   \n",
       "2                  100649.88                                          0.00   \n",
       "3                  100267.40                                          0.26   \n",
       "4                  100664.11                                          0.92   \n",
       "...                      ...                                           ...   \n",
       "16867               99717.88                                          0.00   \n",
       "16868              100450.42                                          0.00   \n",
       "16869              100341.69                                          0.04   \n",
       "16870               99730.39                                          0.01   \n",
       "16871               99075.00                                          0.00   \n",
       "\n",
       "       latitude  longitude  event_id  \n",
       "0       32.4869   -94.1689    203448  \n",
       "1       32.4869   -94.1689    203448  \n",
       "2       32.4869   -94.1689    203448  \n",
       "3       32.4869   -94.1689    203448  \n",
       "4       32.4869   -94.1689    203448  \n",
       "...         ...        ...       ...  \n",
       "16867   37.9392   -89.1503    677492  \n",
       "16868   37.9392   -89.1503    677492  \n",
       "16869   37.9392   -89.1503    677492  \n",
       "16870   37.9392   -89.1503    677492  \n",
       "16871   37.9392   -89.1503    677492  \n",
       "\n",
       "[16872 rows x 10 columns]"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>temperature (degC)</th>\n      <th>wind_speed (m/s)</th>\n      <th>surface_solar_radiation (W/m^2)</th>\n      <th>relative_humidity (0-1)</th>\n      <th>surface_pressure (Pa)</th>\n      <th>total_precipitation (mm of water equivalent)</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>event_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2009-11-25</td>\n      <td>9.91</td>\n      <td>2.76</td>\n      <td>160</td>\n      <td>0.47</td>\n      <td>101257.58</td>\n      <td>0.00</td>\n      <td>32.4869</td>\n      <td>-94.1689</td>\n      <td>203448</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2009-11-26</td>\n      <td>9.35</td>\n      <td>2.11</td>\n      <td>145</td>\n      <td>0.60</td>\n      <td>101181.89</td>\n      <td>0.00</td>\n      <td>32.4869</td>\n      <td>-94.1689</td>\n      <td>203448</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2009-11-27</td>\n      <td>13.11</td>\n      <td>3.30</td>\n      <td>111</td>\n      <td>0.63</td>\n      <td>100649.88</td>\n      <td>0.00</td>\n      <td>32.4869</td>\n      <td>-94.1689</td>\n      <td>203448</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2009-11-28</td>\n      <td>16.85</td>\n      <td>3.27</td>\n      <td>71</td>\n      <td>0.83</td>\n      <td>100267.40</td>\n      <td>0.26</td>\n      <td>32.4869</td>\n      <td>-94.1689</td>\n      <td>203448</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2009-11-29</td>\n      <td>12.53</td>\n      <td>3.04</td>\n      <td>98</td>\n      <td>0.79</td>\n      <td>100664.11</td>\n      <td>0.92</td>\n      <td>32.4869</td>\n      <td>-94.1689</td>\n      <td>203448</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>16867</th>\n      <td>2017-02-24</td>\n      <td>4.32</td>\n      <td>5.83</td>\n      <td>187</td>\n      <td>0.49</td>\n      <td>99717.88</td>\n      <td>0.00</td>\n      <td>37.9392</td>\n      <td>-89.1503</td>\n      <td>677492</td>\n    </tr>\n    <tr>\n      <th>16868</th>\n      <td>2017-02-25</td>\n      <td>2.52</td>\n      <td>1.58</td>\n      <td>155</td>\n      <td>0.46</td>\n      <td>100450.42</td>\n      <td>0.00</td>\n      <td>37.9392</td>\n      <td>-89.1503</td>\n      <td>677492</td>\n    </tr>\n    <tr>\n      <th>16869</th>\n      <td>2017-02-26</td>\n      <td>9.50</td>\n      <td>2.33</td>\n      <td>183</td>\n      <td>0.61</td>\n      <td>100341.69</td>\n      <td>0.04</td>\n      <td>37.9392</td>\n      <td>-89.1503</td>\n      <td>677492</td>\n    </tr>\n    <tr>\n      <th>16870</th>\n      <td>2017-02-27</td>\n      <td>15.56</td>\n      <td>4.96</td>\n      <td>54</td>\n      <td>0.77</td>\n      <td>99730.39</td>\n      <td>0.01</td>\n      <td>37.9392</td>\n      <td>-89.1503</td>\n      <td>677492</td>\n    </tr>\n    <tr>\n      <th>16871</th>\n      <td>2017-02-28</td>\n      <td>20.36</td>\n      <td>6.07</td>\n      <td>18</td>\n      <td>0.82</td>\n      <td>99075.00</td>\n      <td>0.00</td>\n      <td>37.9392</td>\n      <td>-89.1503</td>\n      <td>677492</td>\n    </tr>\n  </tbody>\n</table>\n<p>16872 rows Ã— 10 columns</p>\n</div>"
     },
     "metadata": {},
     "execution_count": 4
    }
   ],
   "source": [
    "df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = data.drop(columns=['Unnamed: 0'])\n",
    "# Get a seto of the event Id's\n",
    "event_ids = set(df['event_id'].to_numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Produces a list of dfs\n",
    "# Each df has the rolling means of the fundamental features\n",
    "list_of_dfs = []\n",
    "#Use IDs to loop over events \n",
    "for i in event_ids:\n",
    "    # We initialize a df per event\n",
    "    event_df = pd.DataFrame()\n",
    "    # Get data for that event \n",
    "    event = df.loc[df['event_id'] == i]\n",
    "    # Save the dates\n",
    "    temp = event['datetime']\n",
    "    # We only want the features we are processing\n",
    "    fundamental_features = event.drop(columns=['datetime', 'latitude', 'longitude', 'event_id'\t], axis = 1)\n",
    "    # Compute the rolling mean\n",
    "    event_df = fundamental_features.expanding().mean() \n",
    "    # Put the date\n",
    "    event_df['Date'] = temp \n",
    "    # We want 3 weeks of data\n",
    "    event_df = event_df.tail(21)\n",
    "    # Add to list\n",
    "    list_of_dfs.append(event_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "metadata": {},
     "execution_count": 13
    }
   ],
   "source": [
    "len(list_of_dfs)\n",
    "len(list_of_dfs[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "       temperature (degC)  wind_speed (m/s)  surface_solar_radiation (W/m^2)  \\\n",
       "16566           15.615946          3.614595                        96.783784   \n",
       "16567           15.732105          3.584737                        96.842105   \n",
       "16568           15.856923          3.569231                        96.102564   \n",
       "16569           15.942250          3.595000                        97.225000   \n",
       "16570           15.934634          3.692439                        99.243902   \n",
       "16571           15.898571          3.608333                       101.214286   \n",
       "16572           15.948140          3.616744                       101.790698   \n",
       "16573           15.949773          3.631591                       103.000000   \n",
       "16574           15.820889          3.652889                       104.644444   \n",
       "16575           15.696087          3.633478                       104.326087   \n",
       "16576           15.607234          3.666596                       106.191489   \n",
       "16577           15.556042          3.648958                       107.979167   \n",
       "16578           15.562449          3.665306                       109.612245   \n",
       "16579           15.587800          3.670400                       110.240000   \n",
       "16580           15.621765          3.636078                       110.960784   \n",
       "16581           15.619808          3.599808                       110.288462   \n",
       "16582           15.528302          3.601321                       111.471698   \n",
       "16583           15.521481          3.580926                       112.666667   \n",
       "16584           15.568364          3.574364                       113.000000   \n",
       "16585           15.633929          3.591607                       111.839286   \n",
       "16586           15.744035          3.640175                       110.052632   \n",
       "\n",
       "       relative_humidity (0-1)  surface_pressure (Pa)  \\\n",
       "16566                 0.821351          102196.950811   \n",
       "16567                 0.823684          102163.660789   \n",
       "16568                 0.825385          102122.925385   \n",
       "16569                 0.823500          102066.205500   \n",
       "16570                 0.818537          102029.591707   \n",
       "16571                 0.815952          102011.347143   \n",
       "16572                 0.815581          101990.168140   \n",
       "16573                 0.810455          101981.880000   \n",
       "16574                 0.803556          101989.729556   \n",
       "16575                 0.796304          101997.687174   \n",
       "16576                 0.789574          102000.070213   \n",
       "16577                 0.784375          102005.124792   \n",
       "16578                 0.782245          102007.550000   \n",
       "16579                 0.781000          102006.680800   \n",
       "16580                 0.781373          102008.689020   \n",
       "16581                 0.782692          102014.534423   \n",
       "16582                 0.778679          102026.985283   \n",
       "16583                 0.777963          102031.097037   \n",
       "16584                 0.779273          102030.379091   \n",
       "16585                 0.781429          102017.196250   \n",
       "16586                 0.782456          101995.665965   \n",
       "\n",
       "       total_precipitation (mm of water equivalent)        Date  \n",
       "16566                                      0.167027  2017-01-18  \n",
       "16567                                      0.164737  2017-01-19  \n",
       "16568                                      0.197436  2017-01-20  \n",
       "16569                                      0.198750  2017-01-21  \n",
       "16570                                      0.194390  2017-01-22  \n",
       "16571                                      0.189762  2017-01-23  \n",
       "16572                                      0.185581  2017-01-24  \n",
       "16573                                      0.182273  2017-01-25  \n",
       "16574                                      0.178222  2017-01-26  \n",
       "16575                                      0.174348  2017-01-27  \n",
       "16576                                      0.170638  2017-01-28  \n",
       "16577                                      0.167083  2017-01-29  \n",
       "16578                                      0.163673  2017-01-30  \n",
       "16579                                      0.160400  2017-01-31  \n",
       "16580                                      0.157451  2017-02-01  \n",
       "16581                                      0.154615  2017-02-02  \n",
       "16582                                      0.151698  2017-02-03  \n",
       "16583                                      0.148889  2017-02-04  \n",
       "16584                                      0.146182  2017-02-05  \n",
       "16585                                      0.154464  2017-02-06  \n",
       "16586                                      0.151930  2017-02-07  "
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>temperature (degC)</th>\n      <th>wind_speed (m/s)</th>\n      <th>surface_solar_radiation (W/m^2)</th>\n      <th>relative_humidity (0-1)</th>\n      <th>surface_pressure (Pa)</th>\n      <th>total_precipitation (mm of water equivalent)</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>16566</th>\n      <td>15.615946</td>\n      <td>3.614595</td>\n      <td>96.783784</td>\n      <td>0.821351</td>\n      <td>102196.950811</td>\n      <td>0.167027</td>\n      <td>2017-01-18</td>\n    </tr>\n    <tr>\n      <th>16567</th>\n      <td>15.732105</td>\n      <td>3.584737</td>\n      <td>96.842105</td>\n      <td>0.823684</td>\n      <td>102163.660789</td>\n      <td>0.164737</td>\n      <td>2017-01-19</td>\n    </tr>\n    <tr>\n      <th>16568</th>\n      <td>15.856923</td>\n      <td>3.569231</td>\n      <td>96.102564</td>\n      <td>0.825385</td>\n      <td>102122.925385</td>\n      <td>0.197436</td>\n      <td>2017-01-20</td>\n    </tr>\n    <tr>\n      <th>16569</th>\n      <td>15.942250</td>\n      <td>3.595000</td>\n      <td>97.225000</td>\n      <td>0.823500</td>\n      <td>102066.205500</td>\n      <td>0.198750</td>\n      <td>2017-01-21</td>\n    </tr>\n    <tr>\n      <th>16570</th>\n      <td>15.934634</td>\n      <td>3.692439</td>\n      <td>99.243902</td>\n      <td>0.818537</td>\n      <td>102029.591707</td>\n      <td>0.194390</td>\n      <td>2017-01-22</td>\n    </tr>\n    <tr>\n      <th>16571</th>\n      <td>15.898571</td>\n      <td>3.608333</td>\n      <td>101.214286</td>\n      <td>0.815952</td>\n      <td>102011.347143</td>\n      <td>0.189762</td>\n      <td>2017-01-23</td>\n    </tr>\n    <tr>\n      <th>16572</th>\n      <td>15.948140</td>\n      <td>3.616744</td>\n      <td>101.790698</td>\n      <td>0.815581</td>\n      <td>101990.168140</td>\n      <td>0.185581</td>\n      <td>2017-01-24</td>\n    </tr>\n    <tr>\n      <th>16573</th>\n      <td>15.949773</td>\n      <td>3.631591</td>\n      <td>103.000000</td>\n      <td>0.810455</td>\n      <td>101981.880000</td>\n      <td>0.182273</td>\n      <td>2017-01-25</td>\n    </tr>\n    <tr>\n      <th>16574</th>\n      <td>15.820889</td>\n      <td>3.652889</td>\n      <td>104.644444</td>\n      <td>0.803556</td>\n      <td>101989.729556</td>\n      <td>0.178222</td>\n      <td>2017-01-26</td>\n    </tr>\n    <tr>\n      <th>16575</th>\n      <td>15.696087</td>\n      <td>3.633478</td>\n      <td>104.326087</td>\n      <td>0.796304</td>\n      <td>101997.687174</td>\n      <td>0.174348</td>\n      <td>2017-01-27</td>\n    </tr>\n    <tr>\n      <th>16576</th>\n      <td>15.607234</td>\n      <td>3.666596</td>\n      <td>106.191489</td>\n      <td>0.789574</td>\n      <td>102000.070213</td>\n      <td>0.170638</td>\n      <td>2017-01-28</td>\n    </tr>\n    <tr>\n      <th>16577</th>\n      <td>15.556042</td>\n      <td>3.648958</td>\n      <td>107.979167</td>\n      <td>0.784375</td>\n      <td>102005.124792</td>\n      <td>0.167083</td>\n      <td>2017-01-29</td>\n    </tr>\n    <tr>\n      <th>16578</th>\n      <td>15.562449</td>\n      <td>3.665306</td>\n      <td>109.612245</td>\n      <td>0.782245</td>\n      <td>102007.550000</td>\n      <td>0.163673</td>\n      <td>2017-01-30</td>\n    </tr>\n    <tr>\n      <th>16579</th>\n      <td>15.587800</td>\n      <td>3.670400</td>\n      <td>110.240000</td>\n      <td>0.781000</td>\n      <td>102006.680800</td>\n      <td>0.160400</td>\n      <td>2017-01-31</td>\n    </tr>\n    <tr>\n      <th>16580</th>\n      <td>15.621765</td>\n      <td>3.636078</td>\n      <td>110.960784</td>\n      <td>0.781373</td>\n      <td>102008.689020</td>\n      <td>0.157451</td>\n      <td>2017-02-01</td>\n    </tr>\n    <tr>\n      <th>16581</th>\n      <td>15.619808</td>\n      <td>3.599808</td>\n      <td>110.288462</td>\n      <td>0.782692</td>\n      <td>102014.534423</td>\n      <td>0.154615</td>\n      <td>2017-02-02</td>\n    </tr>\n    <tr>\n      <th>16582</th>\n      <td>15.528302</td>\n      <td>3.601321</td>\n      <td>111.471698</td>\n      <td>0.778679</td>\n      <td>102026.985283</td>\n      <td>0.151698</td>\n      <td>2017-02-03</td>\n    </tr>\n    <tr>\n      <th>16583</th>\n      <td>15.521481</td>\n      <td>3.580926</td>\n      <td>112.666667</td>\n      <td>0.777963</td>\n      <td>102031.097037</td>\n      <td>0.148889</td>\n      <td>2017-02-04</td>\n    </tr>\n    <tr>\n      <th>16584</th>\n      <td>15.568364</td>\n      <td>3.574364</td>\n      <td>113.000000</td>\n      <td>0.779273</td>\n      <td>102030.379091</td>\n      <td>0.146182</td>\n      <td>2017-02-05</td>\n    </tr>\n    <tr>\n      <th>16585</th>\n      <td>15.633929</td>\n      <td>3.591607</td>\n      <td>111.839286</td>\n      <td>0.781429</td>\n      <td>102017.196250</td>\n      <td>0.154464</td>\n      <td>2017-02-06</td>\n    </tr>\n    <tr>\n      <th>16586</th>\n      <td>15.744035</td>\n      <td>3.640175</td>\n      <td>110.052632</td>\n      <td>0.782456</td>\n      <td>101995.665965</td>\n      <td>0.151930</td>\n      <td>2017-02-07</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 15
    }
   ],
   "source": [
    "list_of_dfs[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generateRollingAvgFeatures(df):\n",
    "    ''' Turns a whole data frame into a line of rolling average features\n",
    "    '''\n",
    "    flag = 0\n",
    "    #Initialize DF thatll take the processed data \n",
    "    event_df = pd.DataFrame()\n",
    "    #Iterate over ever column\n",
    "    for column in df:\n",
    "        if ( not flag):\n",
    "            # Processed list\n",
    "            # Turn the column of data into a list\n",
    "            processing_list = df[str(column)].tolist()\n",
    "            # print(type(processing_list))\n",
    "            # print(\"processing_list\")\n",
    "            # print(processing_list)\n",
    "            #Loop over the list \n",
    "            flag += 1\n",
    "            # Initialize a list to store the 7 processed values \n",
    "            processed_list = []\n",
    "            for i in range(len(processing_list)):\n",
    "                # Gets the right spots for computing\n",
    "                if (((i + 1) % 3) == 0):\n",
    "                    # print(\"factors i = \" + str(i))\n",
    "                    # print(str(processing_list[i]) + \" \" + str(processing_list[i -1]) + \" \" + str(processing_list[i-2]))\n",
    "                    feature_point = (processing_list[i] + processing_list[i -1] + processing_list[i-2]) / 3\n",
    "                    # print(type(feature_point))\n",
    "                    # print(feature_point)\n",
    "                    processed_list.append(feature_point)\n",
    "\n",
    "                    # TODO: Should the data be normalized within its own sample at this point ?\n",
    "            # print(processed_list)\n",
    "            # TODO: We finished processing the data , we need to turn it into a row of features\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Loop over each Df\n",
    "processing_data = list_of_dfs.copy()\n",
    "flag = 0 \n",
    "df = pd.DataFrame()\n",
    "for df in processing_data:\n",
    "    if (not flag):\n",
    "        # This will return a row of features for each event \n",
    "        # TODO:Should this return a list that then becomes a row in the dataframe?\n",
    "        generateRollingAvgFeatures(df)\n",
    "        flag +=1\n",
    "        # We need to add this df to the \n",
    "\n",
    "# Pass the DF\n",
    "# For each DF run computations and generate columns -> Features"
   ]
  },
  {
   "source": [
    "##Helper Function"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Takes input two column names of a dataframe and returns the ratio between then returns the ratio of them as a new figure in the dataframe inputed\n",
    "\n",
    "def create_ratio_column(numerator, denominator, df):\n",
    "    ''' numerator, denominator are column names \n",
    "        df is the df where the columns are \n",
    "    ''' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Plot data\n",
    "## Take any 2 columns and plot how they relate to eachother in a line \n",
    "def create_line(df_column1, df_column2):\n",
    "    ''' We want to be able to visualize the behavior to explore the features more \n",
    "    '''\n",
    "    # Find how windspeed and humidity grow together with time. "
   ]
  },
  {
   "source": [
    "## Drawing Board"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfb = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "metadata": {},
     "execution_count": 52
    }
   ],
   "source": [
    "type(dfb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfb['b'] = [0, 1, 2, 3, 4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfb['c'] = [0, 1, 2, 3, 4]"
   ]
  },
  {
   "source": [],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "   b  c\n",
       "0  0  0\n",
       "1  1  1\n",
       "2  2  2\n",
       "3  3  3\n",
       "4  4  4"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 55
    }
   ],
   "source": [
    "dfb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "     b    c\n",
       "0  0.0  0.0\n",
       "1  0.5  0.5\n",
       "2  1.0  1.0\n",
       "3  1.5  1.5\n",
       "4  2.0  2.0"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.5</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.5</td>\n      <td>1.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 56
    }
   ],
   "source": [
    "dfb.expanding().mean()"
   ]
  }
 ]
}