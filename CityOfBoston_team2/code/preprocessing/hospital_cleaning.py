"""last modified: 04/07/2021cleaning for hospitals dataset"""#%% packagesfrom pyproj import Transformerimport pandas as pdimport ast#%% importprint('acquiring data...')raw = pd.read_csv('../../datasets_clean/not_ready/hospitals_sanitized.csv')#%% cleaning up columnsprint('cleaning dataframe...')# back to listraw['coords'] = raw['coords'].apply(lambda x: ast.literal_eval(x[1:-1]))raw['east'] = raw['coords'].apply(lambda x: x[0])raw['north'] = raw['coords'].apply(lambda x: x[1])# saving only id and longitude/latitudeparcels = raw[['NAME', 'ADDRESS', 'ZIPCODE', 'east', 'north', 'buisness_type']]parcels.columns = ['name', 'address', 'zip', 'east', 'north', 'category']# removing na valuesparcels = parcels.dropna().reset_index(drop = True)#%% transforming to latitude and longitude wgs84print('converting coordinates...')# note epsg is massachusetts crs codetransformer = Transformer.from_crs(crs_from = 'epsg:2805',                                   crs_to = 'epsg:4326')# lists of east/north and initial for lat/loneast = list(parcels.east)north = list(parcels.north)latitudes = []longitudes = []# saving a couple entries for testingtest = parcels.loc[0:2,:].copy(deep = True)# transformingfor i in range(len(east)):    new = transformer.transform(east[i],north[i])    latitudes.append(new[0])    longitudes.append(new[1])# updating dataframeparcels.east = latitudesparcels.north = longitudes# checking first couple entriestest1 = transformer.transform(test.east[0],test.north[0])test2 = transformer.transform(test.east[1],test.north[1])test3 = transformer.transform(test.east[2],test.north[2])if test1 == (parcels.east[0],parcels.north[0]) and \    test2 == (parcels.east[1],parcels.north[1]) and \    test3 == (parcels.east[2],parcels.north[2]):        parcels.columns = ['name', 'address', 'zip', 'lat', 'lon', 'category']        print('converted.')        else:    print('improper conversion.')    #%% exportingprint('outputting...')output_path = '../../datasets_clean/hospitals_latlon.csv'# output cleaned and converted data as csvparcels.to_csv(output_path)print('done')#%% visualizingimport foliumprint('generating map of parcels...')base_path = '../maps/hospital_map.html'# function to generate base mapdef generate_base(default_location = [42.3150,-71.0700]):    base_map = folium.Map(location = default_location,                          zoom_start = 12,                          tiles = 'CartoDB positron')    return base_map# latitudes and longitudes as listslatitudes = list(parcels.lat)longitudes = list(parcels.lon)# generating map with schoolsbase = generate_base()for lat, lon in zip(latitudes, longitudes):    folium.Circle(        location = [lat,lon],        radius = 20,        color = 'blue',        fill = True        ).add_to(base)for lat, lon in zip(latitudes, longitudes):    folium.Circle(        location = [parcels.lat[0],parcels.lon[0]],        radius = 20,        color = 'red',        fill = True        ).add_to(base)        base.save(base_path)